#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Severity:
  CRITICAL = 1
  MAJOR = 2
  MINOR = 3
  WARNING = 4
  INDETER = 5
  CLEARED = 5
  NORMAL = 5
  OK = 5
  INFORM = 6
  DEBUG = 7
  AUTH = 8
  UNKNOWN = 9

  _VALUES_TO_NAMES = {
    1: "CRITICAL",
    2: "MAJOR",
    3: "MINOR",
    4: "WARNING",
    5: "INDETER",
    5: "CLEARED",
    5: "NORMAL",
    5: "OK",
    6: "INFORM",
    7: "DEBUG",
    8: "AUTH",
    9: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "CRITICAL": 1,
    "MAJOR": 2,
    "MINOR": 3,
    "WARNING": 4,
    "INDETER": 5,
    "CLEARED": 5,
    "NORMAL": 5,
    "OK": 5,
    "INFORM": 6,
    "DEBUG": 7,
    "AUTH": 8,
    "UNKNOWN": 9,
  }

class TrendIndication:
  MORE_SEVERE = 1
  LESS_SEVERE = 2
  NO_CHANGE = 3

  _VALUES_TO_NAMES = {
    1: "MORE_SEVERE",
    2: "LESS_SEVERE",
    3: "NO_CHANGE",
  }

  _NAMES_TO_VALUES = {
    "MORE_SEVERE": 1,
    "LESS_SEVERE": 2,
    "NO_CHANGE": 3,
  }

class Status:
  OPEN = 1
  ASSIGN = 2
  ACK = 3
  CLOSED = 4
  EXPIRED = 5
  UNKNOWN = 9

  _VALUES_TO_NAMES = {
    1: "OPEN",
    2: "ASSIGN",
    3: "ACK",
    4: "CLOSED",
    5: "EXPIRED",
    9: "UNKNOWN",
  }

  _NAMES_TO_VALUES = {
    "OPEN": 1,
    "ASSIGN": 2,
    "ACK": 3,
    "CLOSED": 4,
    "EXPIRED": 5,
    "UNKNOWN": 9,
  }

class EventType:
  ALERT = 0
  SNMP_TRAP = 1
  SNMP_NOTIF = 2
  IPMI_PET = 3
  SYSLOG = 4
  CHECK = 5
  PROBE = 6
  ENVIRON = 7
  OTHER = 8
  HEARTBEAT = 9

  _VALUES_TO_NAMES = {
    0: "ALERT",
    1: "SNMP_TRAP",
    2: "SNMP_NOTIF",
    3: "IPMI_PET",
    4: "SYSLOG",
    5: "CHECK",
    6: "PROBE",
    7: "ENVIRON",
    8: "OTHER",
    9: "HEARTBEAT",
  }

  _NAMES_TO_VALUES = {
    "ALERT": 0,
    "SNMP_TRAP": 1,
    "SNMP_NOTIF": 2,
    "IPMI_PET": 3,
    "SYSLOG": 4,
    "CHECK": 5,
    "PROBE": 6,
    "ENVIRON": 7,
    "OTHER": 8,
    "HEARTBEAT": 9,
  }


class History:
  """
  Attributes:
   - id
   - event
   - severity
   - status
   - value
   - text
   - updateTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'event', None, None, ), # 2
    (3, TType.I32, 'severity', None, None, ), # 3
    (4, TType.I32, 'status', None, None, ), # 4
    (5, TType.STRING, 'value', None, None, ), # 5
    (6, TType.STRING, 'text', None, None, ), # 6
    (7, TType.STRING, 'updateTime', None, None, ), # 7
  )

  def __init__(self, id=None, event=None, severity=None, status=None, value=None, text=None, updateTime=None,):
    self.id = id
    self.event = event
    self.severity = severity
    self.status = status
    self.value = value
    self.text = text
    self.updateTime = updateTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.event = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.severity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.updateTime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('History')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.event is not None:
      oprot.writeFieldBegin('event', TType.STRING, 2)
      oprot.writeString(self.event)
      oprot.writeFieldEnd()
    if self.severity is not None:
      oprot.writeFieldBegin('severity', TType.I32, 3)
      oprot.writeI32(self.severity)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 4)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 5)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 6)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.updateTime is not None:
      oprot.writeFieldBegin('updateTime', TType.STRING, 7)
      oprot.writeString(self.updateTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.event is None:
      raise TProtocol.TProtocolException(message='Required field event is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.event)
    value = (value * 31) ^ hash(self.severity)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.text)
    value = (value * 31) ^ hash(self.updateTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Alert:
  """
  Attributes:
   - id
   - resource
   - event
   - environment
   - severity
   - correlate
   - status
   - service_
   - group
   - value
   - text
   - tags
   - attributes
   - origin
   - type
   - createTime
   - timeout
   - rawData
   - duplicateCount
   - repeat
   - previousSeverity
   - trendIndication
   - receiveTime
   - lastReceiveId
   - lastReceiveTime
   - history
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'resource', None, None, ), # 2
    (3, TType.STRING, 'event', None, None, ), # 3
    (4, TType.STRING, 'environment', None, None, ), # 4
    (5, TType.I32, 'severity', None,     5, ), # 5
    (6, TType.LIST, 'correlate', (TType.STRING,None), None, ), # 6
    (7, TType.I32, 'status', None, None, ), # 7
    (8, TType.LIST, 'service_', (TType.STRING,None), None, ), # 8
    (9, TType.STRING, 'group', None, None, ), # 9
    (10, TType.STRING, 'value', None, None, ), # 10
    (11, TType.STRING, 'text', None, None, ), # 11
    (12, TType.LIST, 'tags', (TType.STRING,None), None, ), # 12
    (13, TType.MAP, 'attributes', (TType.STRING,None,TType.STRING,None), None, ), # 13
    (14, TType.STRING, 'origin', None, None, ), # 14
    (15, TType.I32, 'type', None,     0, ), # 15
    (16, TType.STRING, 'createTime', None, None, ), # 16
    (17, TType.I32, 'timeout', None, 0, ), # 17
    (18, TType.STRING, 'rawData', None, None, ), # 18
    (19, TType.I64, 'duplicateCount', None, None, ), # 19
    (20, TType.BOOL, 'repeat', None, None, ), # 20
    (21, TType.I32, 'previousSeverity', None, None, ), # 21
    (22, TType.I32, 'trendIndication', None, None, ), # 22
    (23, TType.STRING, 'receiveTime', None, None, ), # 23
    (24, TType.STRING, 'lastReceiveId', None, None, ), # 24
    (25, TType.STRING, 'lastReceiveTime', None, None, ), # 25
    (26, TType.STRUCT, 'history', (History, History.thrift_spec), None, ), # 26
  )

  def __init__(self, id=None, resource=None, event=None, environment=None, severity=thrift_spec[5][4], correlate=None, status=None, service_=None, group=None, value=None, text=None, tags=None, attributes=None, origin=None, type=thrift_spec[15][4], createTime=None, timeout=thrift_spec[17][4], rawData=None, duplicateCount=None, repeat=None, previousSeverity=None, trendIndication=None, receiveTime=None, lastReceiveId=None, lastReceiveTime=None, history=None,):
    self.id = id
    self.resource = resource
    self.event = event
    self.environment = environment
    self.severity = severity
    self.correlate = correlate
    self.status = status
    self.service_ = service_
    self.group = group
    self.value = value
    self.text = text
    self.tags = tags
    self.attributes = attributes
    self.origin = origin
    self.type = type
    self.createTime = createTime
    self.timeout = timeout
    self.rawData = rawData
    self.duplicateCount = duplicateCount
    self.repeat = repeat
    self.previousSeverity = previousSeverity
    self.trendIndication = trendIndication
    self.receiveTime = receiveTime
    self.lastReceiveId = lastReceiveId
    self.lastReceiveTime = lastReceiveTime
    self.history = history

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.resource = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.event = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.environment = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.severity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.correlate = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.correlate.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.service_ = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.service_.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.group = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.tags = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.tags.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.MAP:
          self.attributes = {}
          (_ktype19, _vtype20, _size18 ) = iprot.readMapBegin()
          for _i22 in xrange(_size18):
            _key23 = iprot.readString();
            _val24 = iprot.readString();
            self.attributes[_key23] = _val24
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.origin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.createTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.timeout = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.rawData = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.duplicateCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.BOOL:
          self.repeat = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.previousSeverity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.trendIndication = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.receiveTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.lastReceiveId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRING:
          self.lastReceiveTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRUCT:
          self.history = History()
          self.history.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Alert')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.resource is not None:
      oprot.writeFieldBegin('resource', TType.STRING, 2)
      oprot.writeString(self.resource)
      oprot.writeFieldEnd()
    if self.event is not None:
      oprot.writeFieldBegin('event', TType.STRING, 3)
      oprot.writeString(self.event)
      oprot.writeFieldEnd()
    if self.environment is not None:
      oprot.writeFieldBegin('environment', TType.STRING, 4)
      oprot.writeString(self.environment)
      oprot.writeFieldEnd()
    if self.severity is not None:
      oprot.writeFieldBegin('severity', TType.I32, 5)
      oprot.writeI32(self.severity)
      oprot.writeFieldEnd()
    if self.correlate is not None:
      oprot.writeFieldBegin('correlate', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.correlate))
      for iter25 in self.correlate:
        oprot.writeString(iter25)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 7)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.service_ is not None:
      oprot.writeFieldBegin('service_', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.service_))
      for iter26 in self.service_:
        oprot.writeString(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.group is not None:
      oprot.writeFieldBegin('group', TType.STRING, 9)
      oprot.writeString(self.group)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 10)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 11)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.LIST, 12)
      oprot.writeListBegin(TType.STRING, len(self.tags))
      for iter27 in self.tags:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.attributes is not None:
      oprot.writeFieldBegin('attributes', TType.MAP, 13)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.attributes))
      for kiter28,viter29 in self.attributes.items():
        oprot.writeString(kiter28)
        oprot.writeString(viter29)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.origin is not None:
      oprot.writeFieldBegin('origin', TType.STRING, 14)
      oprot.writeString(self.origin)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 15)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.STRING, 16)
      oprot.writeString(self.createTime)
      oprot.writeFieldEnd()
    if self.timeout is not None:
      oprot.writeFieldBegin('timeout', TType.I32, 17)
      oprot.writeI32(self.timeout)
      oprot.writeFieldEnd()
    if self.rawData is not None:
      oprot.writeFieldBegin('rawData', TType.STRING, 18)
      oprot.writeString(self.rawData)
      oprot.writeFieldEnd()
    if self.duplicateCount is not None:
      oprot.writeFieldBegin('duplicateCount', TType.I64, 19)
      oprot.writeI64(self.duplicateCount)
      oprot.writeFieldEnd()
    if self.repeat is not None:
      oprot.writeFieldBegin('repeat', TType.BOOL, 20)
      oprot.writeBool(self.repeat)
      oprot.writeFieldEnd()
    if self.previousSeverity is not None:
      oprot.writeFieldBegin('previousSeverity', TType.I32, 21)
      oprot.writeI32(self.previousSeverity)
      oprot.writeFieldEnd()
    if self.trendIndication is not None:
      oprot.writeFieldBegin('trendIndication', TType.I32, 22)
      oprot.writeI32(self.trendIndication)
      oprot.writeFieldEnd()
    if self.receiveTime is not None:
      oprot.writeFieldBegin('receiveTime', TType.STRING, 23)
      oprot.writeString(self.receiveTime)
      oprot.writeFieldEnd()
    if self.lastReceiveId is not None:
      oprot.writeFieldBegin('lastReceiveId', TType.STRING, 24)
      oprot.writeString(self.lastReceiveId)
      oprot.writeFieldEnd()
    if self.lastReceiveTime is not None:
      oprot.writeFieldBegin('lastReceiveTime', TType.STRING, 25)
      oprot.writeString(self.lastReceiveTime)
      oprot.writeFieldEnd()
    if self.history is not None:
      oprot.writeFieldBegin('history', TType.STRUCT, 26)
      self.history.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.resource is None:
      raise TProtocol.TProtocolException(message='Required field resource is unset!')
    if self.event is None:
      raise TProtocol.TProtocolException(message='Required field event is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.resource)
    value = (value * 31) ^ hash(self.event)
    value = (value * 31) ^ hash(self.environment)
    value = (value * 31) ^ hash(self.severity)
    value = (value * 31) ^ hash(self.correlate)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.service_)
    value = (value * 31) ^ hash(self.group)
    value = (value * 31) ^ hash(self.value)
    value = (value * 31) ^ hash(self.text)
    value = (value * 31) ^ hash(self.tags)
    value = (value * 31) ^ hash(self.attributes)
    value = (value * 31) ^ hash(self.origin)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.timeout)
    value = (value * 31) ^ hash(self.rawData)
    value = (value * 31) ^ hash(self.duplicateCount)
    value = (value * 31) ^ hash(self.repeat)
    value = (value * 31) ^ hash(self.previousSeverity)
    value = (value * 31) ^ hash(self.trendIndication)
    value = (value * 31) ^ hash(self.receiveTime)
    value = (value * 31) ^ hash(self.lastReceiveId)
    value = (value * 31) ^ hash(self.lastReceiveTime)
    value = (value * 31) ^ hash(self.history)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Heartbeat:
  """
  Attributes:
   - id
   - origin
   - tags
   - type
   - createTime
   - timeout
   - receiveTime
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'origin', None, None, ), # 2
    (3, TType.LIST, 'tags', (TType.STRING,None), None, ), # 3
    (4, TType.I32, 'type', None,     9, ), # 4
    (5, TType.STRING, 'createTime', None, None, ), # 5
    (6, TType.I32, 'timeout', None, 0, ), # 6
    (7, TType.STRING, 'receiveTime', None, None, ), # 7
  )

  def __init__(self, id=None, origin=None, tags=None, type=thrift_spec[4][4], createTime=None, timeout=thrift_spec[6][4], receiveTime=None,):
    self.id = id
    self.origin = origin
    self.tags = tags
    self.type = type
    self.createTime = createTime
    self.timeout = timeout
    self.receiveTime = receiveTime

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.origin = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.tags = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readString();
            self.tags.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.createTime = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.timeout = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.receiveTime = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Heartbeat')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.origin is not None:
      oprot.writeFieldBegin('origin', TType.STRING, 2)
      oprot.writeString(self.origin)
      oprot.writeFieldEnd()
    if self.tags is not None:
      oprot.writeFieldBegin('tags', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.tags))
      for iter36 in self.tags:
        oprot.writeString(iter36)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 4)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.createTime is not None:
      oprot.writeFieldBegin('createTime', TType.STRING, 5)
      oprot.writeString(self.createTime)
      oprot.writeFieldEnd()
    if self.timeout is not None:
      oprot.writeFieldBegin('timeout', TType.I32, 6)
      oprot.writeI32(self.timeout)
      oprot.writeFieldEnd()
    if self.receiveTime is not None:
      oprot.writeFieldBegin('receiveTime', TType.STRING, 7)
      oprot.writeString(self.receiveTime)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.origin is None:
      raise TProtocol.TProtocolException(message='Required field origin is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.id)
    value = (value * 31) ^ hash(self.origin)
    value = (value * 31) ^ hash(self.tags)
    value = (value * 31) ^ hash(self.type)
    value = (value * 31) ^ hash(self.createTime)
    value = (value * 31) ^ hash(self.timeout)
    value = (value * 31) ^ hash(self.receiveTime)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
